
package self.aub.study.java.webservice.client;

import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.1 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "WSServerService", targetNamespace = "http://webservice.base/", wsdlLocation = "http://localhost:8088/WSServer?wsdl")
public class WSServerService
    extends Service
{

    private final static URL WSSERVERSERVICE_WSDL_LOCATION;

    static {
        URL url = null;
        try {
            url = new URL("http://localhost:8088/WSServerAAA?wsdl");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        }
        WSSERVERSERVICE_WSDL_LOCATION = url;
    }

    public WSServerService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WSServerService() {
        super(WSSERVERSERVICE_WSDL_LOCATION, new QName("http://webservice.base/", "WSServerService"));
    }

    /**
     * 
     * @return
     *     returns WSServer
     */
    @WebEndpoint(name = "WSServerPort")
    public WSServer getWSServerPort() {
        return (WSServer)super.getPort(new QName("http://webservice.base/", "WSServerPort"), WSServer.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WSServer
     */
    @WebEndpoint(name = "WSServerPort")
    public WSServer getWSServerPort(WebServiceFeature... features) {
        return (WSServer)super.getPort(new QName("http://webservice.base/", "WSServerPort"), WSServer.class, features);
    }

}
